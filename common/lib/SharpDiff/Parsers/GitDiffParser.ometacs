using System.Collections.Generic;
using SharpDiff.FileStructure;
using OMetaSharp;

ometa SharpDiff.Parsers.GitDiffParser : Parser {
	Diffs			= ((NewLine | Empty) Diff)+:diffs					-> { diffs },
	Diff			= Header:header NewLine IndexHeader NewLine Chunks:chunks
																		-> { new Diff(header.As<Header>(), chunks.ToIEnumerable<Chunk>()) },
	Header			= "diff" Space FormatType:format FileDefs:files		-> { new Header(format.As<FormatType>(), files.ToIEnumerable<IFile>()) }
					| "diff" Space FormatType:format					-> { new Header(format.As<FormatType>()) },
	IndexHeader		= "index" Space HashRange:range Space Number:mode	-> { new IndexHeader(range.As<HashRange>(), mode.As<int>()) },
	Chunks			= (ChunkHeader NewLine | Empty) Chunk+:chunks
																		-> { chunks },
	Chunk			= ChunkRange:range Snippet+:snippets (NewLine | Empty)
																		-> { new Chunk(range.As<ChunkRange>(), snippets.ToIEnumerable<ISnippet>()) }
					| ChunkRange:range (NewLine | Empty)				-> { new Chunk(range.As<ChunkRange>(), new List<ISnippet>()) },
	
					
	ChunkHeader		= "---" FileDef:originalFile NewLine "+++" FileDef:newFile
																		-> { new ChunkHeader(originalFile.As<IFile>(), newFile.As<IFile>()) },
	ChunkRange		= "@@" Space ChangeRange:originalRange Space ChangeRange:newRange Space "@@" (Text | Empty -> { "" }):value (NewLine | Empty)
																		-> { new ChunkRange(originalRange.As<ChangeRange>(), newRange.As<ChangeRange>()) },
	ChangeRange		= ("+" | "-") Number:line "," Number:affected		-> { new ChangeRange(line.As<int>(), affected.As<int>()) }
					| ("+" | "-") Number:line							-> { new ChangeRange(line.As<int>(), 1) },
	Snippet			= ContextSnippet
					| ModificationSnippet
					| AdditionSnippet
					| SubtractionSnippet,
	ContextSnippet  = ContextLine+:lines								-> { new ContextSnippet(lines.ToIEnumerable<ILine>()) },
	AdditionSnippet  = AdditionLine+:lines								-> { new AdditionSnippet(lines.ToIEnumerable<ILine>()) },
	SubtractionSnippet  = SubtractionLine+:lines						-> { new SubtractionSnippet(lines.ToIEnumerable<ILine>()) },
	ModificationSnippet = SubtractionLine+:subtractions AdditionLine+:additions
																		-> { new ModificationSnippet(subtractions.ToIEnumerable<ILine>(), additions.ToIEnumerable<ILine>()) },
	DiffLines			= AnyLine+:lines									-> { lines },
	AnyLine				= ContextLine
						| AdditionLine
						| SubtractionLine
						| NoNewLineAtEOFLine,
	ContextLine			= Space Line:value									-> { new ContextLine(value.As<string>()) },
	AdditionLine		= "+" Line:value									-> { new AdditionLine(value.As<string>()) },
	SubtractionLine		= "-" Line:value									-> { new SubtractionLine(value.As<string>()) },
	NoNewLineAtEOFLine	= '\\' Space "No newline at end of file" NewLine	-> { new NoNewLineAtEOFLine() }
						| '\\' Space "No newline at end of file"			-> { new NoNewLineAtEOFLine() },
	Line				= (Text | Empty -> { "" }):value NewLine			-> { value.As<string>() },
	FileDefs		= FileDef+:files									-> { files },
	FileDef			= Space Letter:letter "/" Filename:filename			-> { new File(letter.As<char>(), filename.As<string>()) }
					| Letter:letter "/" Filename:filename				-> { new File(letter.As<char>(), filename.As<string>()) }
					| "/dev/null"										-> { new NullFile() },
	FormatType		= "--" LetterOrDigit+:format						-> { new FormatType(format.As<string>()) },
	HashRange		= LetterOrDigit+:first ".." LetterOrDigit+:second	-> { new HashRange(first.As<string>(), second.As<string>()) },
	Filename		= (~Space ~NewLine Character)+:filename "." LetterOrDigit+:extension
																		-> { filename + "." + extension }
					| (~Space ~NewLine Character)+:filename									-> { filename },
	Text			= (~NewLine Character)+:t							-> { t.As<string>() },
	Number		   ^= Digit+:ds<string>									-> { int.Parse(ds) },
	NewLine			= '\r' '\n'
					| '\n'
}
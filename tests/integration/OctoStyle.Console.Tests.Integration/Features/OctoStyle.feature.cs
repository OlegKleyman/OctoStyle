// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OctoStyle.Console.Tests.Integration.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OctoStyle")]
    [NUnit.Framework.CategoryAttribute("octoStyle")]
    public partial class OctoStyleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OctoStyle.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OctoStyle", "As a user I want to run the OctoStyle\r\napplication and have it comment on any sty" +
                    "le cop\r\nissues it finds on a pull request", ProgrammingLanguage.CSharp, new string[] {
                        "octoStyle"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pull request with issues")]
        [NUnit.Framework.CategoryAttribute("pullRequest")]
        public virtual void PullRequestWithIssues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pull request with issues", new string[] {
                        "pullRequest"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have a pull request with stylistic problems", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I run the OctoStyle using the StyleCop engine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "File",
                        "Position",
                        "Message"});
            table1.AddRow(new string[] {
                        "src/TestLibrary/TestClass.cs",
                        "5",
                        "SA1600 - The method must have a documentation header."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/TestClass.cs",
                        "9",
                        "SA1513 - Statements or elements wrapped in curly brackets must be followed by a b" +
                            "lank line."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass2.cs",
                        "1",
                        "Renamed files not supported."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "1",
                        "SA1633 - The file has no header, the header Xml is invalid, or the header is not " +
                            "located at the top of the file."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "1",
                        "SA1200 - All using directives must be placed inside of the namespace."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "2",
                        "SA1200 - All using directives must be placed inside of the namespace."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "3",
                        "SA1200 - All using directives must be placed inside of the namespace."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "4",
                        "SA1200 - All using directives must be placed inside of the namespace."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "5",
                        "SA1200 - All using directives must be placed inside of the namespace."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "9",
                        "SA1600 - The class must have a documentation header."});
            table1.AddRow(new string[] {
                        "src/TestLibrary/Nested/TestClass3.cs",
                        "9",
                        "SA1400 - The class must have an access modifier."});
#line 11
 testRunner.Then("there should be comments on the pull request on the lines of the found violations" +
                    "", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pull request with issues using code analysis")]
        [NUnit.Framework.CategoryAttribute("pullRequest")]
        public virtual void PullRequestWithIssuesUsingCodeAnalysis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pull request with issues using code analysis", new string[] {
                        "pullRequest"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have a pull request with stylistic problems", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I run the OctoStyle using the Roslyn engine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("there should be comments on the pull request on the lines of the found violations" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
